[{"C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\index.js":"1","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\reportWebVitals.js":"2","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\App.js":"3","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\FilterButton.js":"4","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\Task.js":"5","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\OrderedList.js":"6","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\Header.js":"7","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\AddTaskInput.js":"8"},{"size":896,"mtime":1613480988281,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":6010,"mtime":1613483155803,"results":"12","hashOfConfig":"10"},{"size":472,"mtime":1613482224483,"results":"13","hashOfConfig":"10"},{"size":2697,"mtime":1613482446410,"results":"14","hashOfConfig":"10"},{"size":814,"mtime":1613481605360,"results":"15","hashOfConfig":"10"},{"size":1064,"mtime":1613482333031,"results":"16","hashOfConfig":"10"},{"size":693,"mtime":1613415847775,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"lpgqf5",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\index.js",[],["37","38"],"C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\reportWebVitals.js",[],"C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\App.js",["39","40"],"import { useState } from \"react\";\r\n\r\nimport { nanoid } from \"nanoid\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Header from \"./components/Header\";\r\nimport AddTaskInput from \"./components/AddTaskInput\";\r\nimport OrderedList from \"./components/OrderedList\";\r\nimport FilterButton from \"./components/FilterButton\";\r\n\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: (task) => !task.completed,\r\n  Completed: (task) => task.completed,\r\n};\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n  const [data, updateData] = useState(\r\n    tasksFromLocalStorage ? JSON.parse(tasksFromLocalStorage) : props.DATA\r\n  );\r\n  const [filter, setFilter] = useState(\"All\");\r\n\r\n  const orderedListDndContext = data.columns[\"columnOne\"];\r\n  const allTasks = orderedListDndContext.taskIds.map((taskId) => {\r\n    return data.tasks[taskId];\r\n  });\r\n  const activeTasks = allTasks.filter(FILTER_MAP[\"Active\"]);\r\n  const completedTasks = allTasks.filter(FILTER_MAP[\"Completed\"]);\r\n  const filteredTasksByButton = allTasks.filter(FILTER_MAP[filter]);\r\n\r\n  const orderedList = (\r\n    <OrderedList\r\n      deleteTask={deleteTask}\r\n      toggleTaskCompleted={toggleTaskCompleted}\r\n      key={orderedListDndContext.id}\r\n      column={orderedListDndContext}\r\n      tasks={filteredTasksByButton}\r\n      filter={filter}\r\n    />\r\n  );\r\n\r\n  const filterList = FILTER_NAMES.map((filterName) => {\r\n    return (\r\n      <FilterButton\r\n        key={filterName}\r\n        name={filterName}\r\n        isPressed={filterName === filter}\r\n        setFilter={setFilter}\r\n      />\r\n    );\r\n  });\r\n\r\n  // ADD TASK\r\n  function addTask(name) {\r\n    const uniqueId = `task-${nanoid()}`;\r\n    const taskNew = {\r\n      id: `${uniqueId}`,\r\n      name: name,\r\n      completed: false,\r\n    };\r\n\r\n    const obj = {\r\n      taskIds: [...data.columns.columnOne.taskIds, uniqueId],\r\n    };\r\n    const newState = {\r\n      ...data,\r\n      tasks: {\r\n        ...data.tasks,\r\n        [uniqueId]: taskNew,\r\n      },\r\n      columns: {\r\n        columnOne: { ...data.columns.columnOne, ...obj },\r\n      },\r\n    };\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n    setFilter(\"All\");\r\n  }\r\n\r\n  // DELETE TASK\r\n  function deleteTask(id) {\r\n    const tasksObjects = data.tasks;\r\n    delete tasksObjects[id];\r\n\r\n    const arrayOfTaskIds = data.columns.columnOne.taskIds.filter(\r\n      (task) => task !== id\r\n    );\r\n    const obj = {\r\n      taskIds: arrayOfTaskIds,\r\n    };\r\n    const newState = {\r\n      ...data,\r\n      tasks: tasksObjects,\r\n      columns: {\r\n        columnOne: { ...data.columns.columnOne, ...obj },\r\n      },\r\n    };\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n  }\r\n\r\n  // Toggle Task Completed\r\n  function toggleTaskCompleted(id) {\r\n    const updatedTasks = allTasks\r\n      .map((task) => {\r\n        if (id === task.id) {\r\n          return { ...task, completed: !task.completed };\r\n        }\r\n      })\r\n      .filter((task) => task);\r\n\r\n    const newState = {\r\n      ...data,\r\n      tasks: {\r\n        ...data.tasks,\r\n        [id]: updatedTasks[0],\r\n      },\r\n    };\r\n\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n  }\r\n\r\n  function clearCompleted() {\r\n    const tasksObjects = data.tasks;\r\n    const taskIdsArray = data.columns.columnOne.taskIds;\r\n    const completedTasksIdsArray = completedTasks.map((task) => task.id);\r\n    const filteredTaskIds = taskIdsArray.filter(\r\n      (item) => !completedTasksIdsArray.includes(item)\r\n    );\r\n    completedTasks.map((task) => {\r\n      delete tasksObjects[task.id];\r\n    });\r\n    const taskIds = {\r\n      taskIds: filteredTaskIds,\r\n    };\r\n    const newState = {\r\n      ...data,\r\n      tasks: tasksObjects,\r\n      columns: {\r\n        columnOne: { ...data.columns.columnOne, ...taskIds },\r\n      },\r\n    };\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n  }\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n    if (!destination) return;\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    const column = data.columns[source.droppableId];\r\n    const newTaskIds = Array.from(column.taskIds);\r\n    newTaskIds.splice(source.index, 1);\r\n    newTaskIds.splice(destination.index, 0, draggableId);\r\n    const newColumn = {\r\n      ...column,\r\n      taskIds: newTaskIds,\r\n    };\r\n    const newState = {\r\n      ...data,\r\n      columns: {\r\n        ...data.columns,\r\n        [newColumn.id]: newColumn,\r\n      },\r\n    };\r\n\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"background-img\" />\r\n      <div className=\"app-wrapper\">\r\n        <Header />\r\n        <AddTaskInput addTask={addTask} />\r\n        <DragDropContext onDragEnd={onDragEnd}>{orderedList}</DragDropContext>\r\n        <div className=\"filter-buttons box\">\r\n          <div className=\"filter-buttons__items-left\">\r\n            {activeTasks.length} items left\r\n          </div>\r\n\r\n          <div className=\"filter-buttons__mid-buttons-wrapper\" id=\"lukas\">\r\n            {filterList}\r\n          </div>\r\n\r\n          <div onClick={clearCompleted}>\r\n            <button\r\n              aria-label=\"clear completed tasks\"\r\n              type=\"button\"\r\n              className=\"filter-buttons__clear-completed\"\r\n            >\r\n              Clear completed\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"box filter-buttons-mobile\">\r\n          <div>{filterList}</div>\r\n        </div>\r\n\r\n        {filter === \"All\" ? (\r\n          <p className=\"dnd-to-reorder dnd-to-reorder--mobile\">\r\n            Drag and drop to reorder list\r\n          </p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\FilterButton.js",[],"C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\Task.js",[],"C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\OrderedList.js",[],"C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\Header.js",["41"],"import { useState, useEffect } from \"react\";\r\n\r\nfunction Header() {\r\n  const [currentTheme, setTheme] = useState(\"\");\r\n\r\n  let prefferedTheme = localStorage.getItem(\"theme\");\r\n  const body = document.body;\r\n\r\n  useEffect(() => {\r\n    if (prefferedTheme) {\r\n      body.classList.add(prefferedTheme);\r\n      setTheme(prefferedTheme);\r\n    } else {\r\n      body.classList.add(\"dark\");\r\n      setTheme(\"dark\");\r\n    }\r\n  }, []);\r\n\r\n  function changeTheme() {\r\n    if (currentTheme === \"dark\") {\r\n      body.classList.replace(\"dark\", \"light\");\r\n      localStorage.setItem(\"theme\", \"light\");\r\n      setTheme(\"light\");\r\n    } else if (currentTheme === \"light\") {\r\n      body.classList.replace(\"light\", \"dark\");\r\n      localStorage.setItem(\"theme\", \"dark\");\r\n      setTheme(\"dark\");\r\n    }\r\n  }\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header__heading\">TODO</h1>\r\n      <button\r\n        aria-label=\"change theme\"\r\n        onClick={changeTheme}\r\n        className=\"header__icon\"\r\n      ></button>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\PC\\PycharmProjects\\React\\IMPORTANT stuff\\Front End Mentor challenges\\In progress\\todo-app-react\\src\\components\\AddTaskInput.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":106,"column":19,"nodeType":"48","messageId":"49","endLine":106,"endColumn":21},{"ruleId":"46","severity":1,"message":"50","line":132,"column":31,"nodeType":"48","messageId":"51","endLine":132,"endColumn":33},{"ruleId":"52","severity":1,"message":"53","line":17,"column":6,"nodeType":"54","endLine":17,"endColumn":8,"suggestions":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body.classList' and 'prefferedTheme'. Either include them or remove the dependency array.","ArrayExpression",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [body.classList, prefferedTheme]",{"range":"61","text":"62"},[419,421],"[body.classList, prefferedTheme]"]