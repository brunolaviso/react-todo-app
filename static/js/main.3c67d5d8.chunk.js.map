{"version":3,"sources":["components/Header.js","components/AddTaskInput.js","components/Task.js","components/OrderedList.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Header","useState","currentTheme","setTheme","prefferedTheme","localStorage","getItem","body","document","useEffect","classList","add","className","aria-label","onClick","replace","setItem","AddTask","props","name","setName","onSubmit","e","preventDefault","addTask","maxLength","value","onChange","target","placeholder","required","Task","iconChecked","xmlns","width","height","fill","stroke","strokeWidth","d","iconCross","deleteTask","id","type","fillRule","filterIsSetToAll","draggableId","task","index","provided","draggableProps","dragHandleProps","ref","innerRef","isCompleted","toggleTaskCompleted","filterOtherThanAll","filter","Column","droppableId","column","droppableProps","tasks","map","completed","FilterButton","isPressed","setFilter","aria-pressed","FILTER_MAP","All","Active","Completed","FILTER_NAMES","Object","keys","App","tasksFromLocalStorage","JSON","parse","DATA","data","updateData","orderedListDndContext","columns","allTasks","taskIds","taskId","activeTasks","completedTasks","filteredTasksByButton","orderedList","OrderedList","tasksObjects","obj","columnOne","newState","stringify","updatedTasks","filterList","filterName","AddTaskInput","uniqueId","nanoid","taskNew","onDragEnd","result","destination","source","newTaskIds","Array","from","splice","newColumn","length","taskIdsArray","completedTasksIdsArray","filteredTaskIds","item","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","title","columnOrder","getElementById"],"mappings":"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","file":"static/js/main.3c67d5d8.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction Header() {\r\n  const [currentTheme, setTheme] = useState(\"\");\r\n\r\n  let prefferedTheme = localStorage.getItem(\"theme\");\r\n  const body = document.body;\r\n\r\n  useEffect(() => {\r\n    if (prefferedTheme) {\r\n      body.classList.add(prefferedTheme);\r\n      setTheme(prefferedTheme);\r\n    } else {\r\n      body.classList.add(\"dark\");\r\n      setTheme(\"dark\");\r\n    }\r\n  }, []);\r\n\r\n  function changeTheme() {\r\n    if (currentTheme === \"dark\") {\r\n      body.classList.replace(\"dark\", \"light\");\r\n      localStorage.setItem(\"theme\", \"light\");\r\n      setTheme(\"light\");\r\n    } else if (currentTheme === \"light\") {\r\n      body.classList.replace(\"light\", \"dark\");\r\n      localStorage.setItem(\"theme\", \"dark\");\r\n      setTheme(\"dark\");\r\n    }\r\n  }\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header__heading\">TODO</h1>\r\n      <button\r\n        aria-label=\"change theme\"\r\n        onClick={changeTheme}\r\n        className=\"header__icon\"\r\n      ></button>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nfunction AddTask(props) {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n  return (\r\n    <div className=\"form-wrapper\">\r\n      <form onSubmit={handleSubmit} className=\"form \">\r\n        <input\r\n          maxLength=\"44\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          className=\"form__input box\"\r\n          placeholder=\"Create a new todo..\"\r\n          required\r\n        ></input>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTask;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\n\r\nfunction Task(props) {\r\n  function deleteTodo() {\r\n    props.deleteTask(props.id);\r\n  }\r\n\r\n  const iconChecked = (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"9\">\r\n      <path\r\n        fill=\"none\"\r\n        stroke=\"#FFF\"\r\n        strokeWidth=\"2\"\r\n        d=\"M1 4.304L3.696 7l6-6\"\r\n      />\r\n    </svg>\r\n  );\r\n  const iconCross = (\r\n    <button\r\n      onClick={deleteTodo}\r\n      aria-label=\"Delete task\"\r\n      className=\"icon-cross\"\r\n      type=\"button\"\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\">\r\n        <path\r\n          fill=\"#494C6B\"\r\n          fillRule=\"evenodd\"\r\n          d=\"M16.97 0l.708.707L9.546 8.84l8.132 8.132-.707.707-8.132-8.132-8.132 8.132L0 16.97l8.132-8.132L0 .707.707 0 8.84 8.132 16.971 0z\"\r\n        />\r\n      </svg>\r\n    </button>\r\n  );\r\n\r\n  const filterIsSetToAll = (\r\n    <Draggable draggableId={props.task.id} index={props.index}>\r\n      {(provided) => (\r\n        <li\r\n          className=\"box todo-item\"\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <button\r\n            aria-label={\r\n              props.isCompleted ? \"uncheck task\" : \"check task as completed\"\r\n            }\r\n            onClick={() => props.toggleTaskCompleted(props.id)}\r\n            className={`checkbox ${\r\n              props.isCompleted ? \"todo-item__checked\" : \"\"\r\n            }`}\r\n          >\r\n            {props.isCompleted ? iconChecked : \"\"}\r\n          </button>\r\n          <span\r\n            onClick={() => props.toggleTaskCompleted(props.id)}\r\n            className={`todo-item__task-name ${\r\n              props.isCompleted ? \"todo-item__striked\" : \"\"\r\n            }`}\r\n          >\r\n            {props.task.name}\r\n          </span>\r\n          {iconCross}\r\n        </li>\r\n      )}\r\n    </Draggable>\r\n  );\r\n\r\n  const filterOtherThanAll = (\r\n    <li className=\"box todo-item\">\r\n      <button\r\n        aria-label={\r\n          props.isCompleted ? \"uncheck task\" : \"check task as completed\"\r\n        }\r\n        onClick={() => props.toggleTaskCompleted(props.id)}\r\n        className={`checkbox ${props.isCompleted ? \"todo-item__checked\" : \"\"}`}\r\n      >\r\n        {props.isCompleted ? iconChecked : \"\"}\r\n      </button>\r\n      <span\r\n        onClick={() => props.toggleTaskCompleted(props.id)}\r\n        className={`todo-item__task-name ${\r\n          props.isCompleted ? \"todo-item__striked\" : \"\"\r\n        }`}\r\n      >\r\n        {props.task.name}\r\n      </span>\r\n      {iconCross}\r\n    </li>\r\n  );\r\n  return props.filter === \"All\" ? filterIsSetToAll : filterOtherThanAll;\r\n}\r\n\r\nexport default Task;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Task from \"./Task\";\r\n\r\nfunction Column(props) {\r\n  return (\r\n    <Droppable droppableId={props.column.id}>\r\n      {(provided) => (\r\n        <ul className=\"ul\" ref={provided.innerRef} {...provided.droppableProps}>\r\n          {props.tasks.map((task, index) => (\r\n            <Task\r\n              deleteTask={props.deleteTask}\r\n              id={task.id}\r\n              toggleTaskCompleted={props.toggleTaskCompleted}\r\n              name={task.name}\r\n              isCompleted={task.completed}\r\n              key={task.id}\r\n              index={index}\r\n              task={task}\r\n              filter={props.filter}\r\n            />\r\n          ))}\r\n          {provided.placeholder}\r\n        </ul>\r\n      )}\r\n    </Droppable>\r\n  );\r\n}\r\n\r\nexport default Column;\r\n","function FilterButton(props) {\r\n  return (\r\n    <>\r\n      <button\r\n        aria-label={`show ${props.name} tasks`}\r\n        className={`filter-buttons__mid-button ${\r\n          props.isPressed ? \"filter-buttons__butt-pressed\" : \"\"\r\n        }`}\r\n        onClick={() => props.setFilter(props.name)}\r\n        type=\"button\"\r\n        aria-pressed={props.isPressed}\r\n      >\r\n        <span>{props.name}</span>\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import { useState } from \"react\";\r\n\r\nimport { nanoid } from \"nanoid\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Header from \"./components/Header\";\r\nimport AddTaskInput from \"./components/AddTaskInput\";\r\nimport OrderedList from \"./components/OrderedList\";\r\nimport FilterButton from \"./components/FilterButton\";\r\n\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: (task) => !task.completed,\r\n  Completed: (task) => task.completed,\r\n};\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n  const [data, updateData] = useState(\r\n    tasksFromLocalStorage ? JSON.parse(tasksFromLocalStorage) : props.DATA\r\n  );\r\n  const [filter, setFilter] = useState(\"All\");\r\n\r\n  const orderedListDndContext = data.columns[\"columnOne\"];\r\n  const allTasks = orderedListDndContext.taskIds.map((taskId) => {\r\n    return data.tasks[taskId];\r\n  });\r\n  const activeTasks = allTasks.filter(FILTER_MAP[\"Active\"]);\r\n  const completedTasks = allTasks.filter(FILTER_MAP[\"Completed\"]);\r\n  const filteredTasksByButton = allTasks.filter(FILTER_MAP[filter]);\r\n\r\n  const orderedList = (\r\n    <OrderedList\r\n      deleteTask={deleteTask}\r\n      toggleTaskCompleted={toggleTaskCompleted}\r\n      key={orderedListDndContext.id}\r\n      column={orderedListDndContext}\r\n      tasks={filteredTasksByButton}\r\n      filter={filter}\r\n    />\r\n  );\r\n\r\n  const filterList = FILTER_NAMES.map((filterName) => {\r\n    return (\r\n      <FilterButton\r\n        key={filterName}\r\n        name={filterName}\r\n        isPressed={filterName === filter}\r\n        setFilter={setFilter}\r\n      />\r\n    );\r\n  });\r\n\r\n  // ADD TASK\r\n  function addTask(name) {\r\n    const uniqueId = `task-${nanoid()}`;\r\n    const taskNew = {\r\n      id: `${uniqueId}`,\r\n      name: name,\r\n      completed: false,\r\n    };\r\n\r\n    const obj = {\r\n      taskIds: [...data.columns.columnOne.taskIds, uniqueId],\r\n    };\r\n    const newState = {\r\n      ...data,\r\n      tasks: {\r\n        ...data.tasks,\r\n        [uniqueId]: taskNew,\r\n      },\r\n      columns: {\r\n        columnOne: { ...data.columns.columnOne, ...obj },\r\n      },\r\n    };\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n    setFilter(\"All\");\r\n  }\r\n\r\n  // DELETE TASK\r\n  function deleteTask(id) {\r\n    const tasksObjects = data.tasks;\r\n    delete tasksObjects[id];\r\n\r\n    const arrayOfTaskIds = data.columns.columnOne.taskIds.filter(\r\n      (task) => task !== id\r\n    );\r\n    const obj = {\r\n      taskIds: arrayOfTaskIds,\r\n    };\r\n    const newState = {\r\n      ...data,\r\n      tasks: tasksObjects,\r\n      columns: {\r\n        columnOne: { ...data.columns.columnOne, ...obj },\r\n      },\r\n    };\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n  }\r\n\r\n  // Toggle Task Completed\r\n  function toggleTaskCompleted(id) {\r\n    const updatedTasks = allTasks\r\n      .map((task) => {\r\n        if (id === task.id) {\r\n          return { ...task, completed: !task.completed };\r\n        }\r\n      })\r\n      .filter((task) => task);\r\n\r\n    const newState = {\r\n      ...data,\r\n      tasks: {\r\n        ...data.tasks,\r\n        [id]: updatedTasks[0],\r\n      },\r\n    };\r\n\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n  }\r\n\r\n  function clearCompleted() {\r\n    const tasksObjects = data.tasks;\r\n    const taskIdsArray = data.columns.columnOne.taskIds;\r\n    const completedTasksIdsArray = completedTasks.map((task) => task.id);\r\n    const filteredTaskIds = taskIdsArray.filter(\r\n      (item) => !completedTasksIdsArray.includes(item)\r\n    );\r\n    completedTasks.map((task) => {\r\n      delete tasksObjects[task.id];\r\n    });\r\n    const taskIds = {\r\n      taskIds: filteredTaskIds,\r\n    };\r\n    const newState = {\r\n      ...data,\r\n      tasks: tasksObjects,\r\n      columns: {\r\n        columnOne: { ...data.columns.columnOne, ...taskIds },\r\n      },\r\n    };\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n  }\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n    if (!destination) return;\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    const column = data.columns[source.droppableId];\r\n    const newTaskIds = Array.from(column.taskIds);\r\n    newTaskIds.splice(source.index, 1);\r\n    newTaskIds.splice(destination.index, 0, draggableId);\r\n    const newColumn = {\r\n      ...column,\r\n      taskIds: newTaskIds,\r\n    };\r\n    const newState = {\r\n      ...data,\r\n      columns: {\r\n        ...data.columns,\r\n        [newColumn.id]: newColumn,\r\n      },\r\n    };\r\n\r\n    updateData(newState);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"background-img\" />\r\n      <div className=\"app-wrapper\">\r\n        <Header />\r\n        <AddTaskInput addTask={addTask} />\r\n        <DragDropContext onDragEnd={onDragEnd}>{orderedList}</DragDropContext>\r\n        <div className=\"filter-buttons box\">\r\n          <div className=\"filter-buttons__items-left\">\r\n            {activeTasks.length} items left\r\n          </div>\r\n\r\n          <div className=\"filter-buttons__mid-buttons-wrapper\" id=\"lukas\">\r\n            {filterList}\r\n          </div>\r\n\r\n          <div onClick={clearCompleted}>\r\n            <button\r\n              aria-label=\"clear completed tasks\"\r\n              type=\"button\"\r\n              className=\"filter-buttons__clear-completed\"\r\n            >\r\n              Clear completed\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"box filter-buttons-mobile\">\r\n          <div>{filterList}</div>\r\n        </div>\r\n\r\n        {filter === \"All\" ? (\r\n          <p className=\"dnd-to-reorder dnd-to-reorder--mobile\">\r\n            Drag and drop to reorder list\r\n          </p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst DATA = {\n  tasks: {\n    \"task-1\": {\n      id: \"task-1\",\n      name: \"Watch my favorite show\",\n      completed: true,\n    },\n    \"task-2\": {\n      id: \"task-2\",\n      name: \"Take out the garbage\",\n      completed: true,\n    },\n    // \"task-3\": { id: \"task-3\", name: \"Charge my phone\", completed: true },\n    \"task-4\": { id: \"task-4\", name: \"Cook dinner\", completed: false },\n  },\n\n  columns: {\n    columnOne: {\n      id: \"columnOne\",\n      title: \"To do\",\n      taskIds: [\"task-1\", \"task-2\", \"task-4\"],\n    },\n  },\n  // Facilitate reordering of the columns\n  columnOrder: [\"columnOne\"],\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App DATA={DATA} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}